<?php declare(strict_types=1);
namespace hiperesp\server\services;

use hiperesp\server\exceptions\DBConfigException;
use hiperesp\server\storage\Storage;

class SetupService extends Service {

    public function upgradeDatabase(): void {
        $storage = Storage::getStorage();
        if(!$storage->canSetup()) {
            throw new \Exception("Database is already setup.");
        }
        $storage = Storage::getStorage();
        $storage->setup();
    }

    public function createConfig(array $fields): void {
        if(!$this->canCreateConfig()) {
            throw new \Exception("The server is already setup.");
        }
        $config = $this->generateConfig($fields);
        $this->saveConfig($config);
    }

    private function saveConfig(array $config): void {
        global $base;

        $configStr = \var_export($config, true);
        $success = !!\file_put_contents($base . "/.config.php", "<?php\n# This file is auto-generated by the setup script.\n\$config = {$configStr};");
        if(!$success) {
            throw new \Exception("Failed to save the config.");
        }
    }

    private function generateConfig(array $fields): array {
        if(!isset($fields["DB_DRIVER"])) {
            throw new \Exception("The DB_DRIVER is required.");
        }

        if(!isset($fields["DB_OPTIONS"])) {
            throw new \Exception("The DB_OPTIONS is required.");
        }
        // validate if class extends Storage
        if(!\is_subclass_of($fields["DB_DRIVER"], Storage::class)) {
            throw new \Exception("Invalid DB_DRIVER. The DB_DRIVER must extend Storage.");
        }

        try {
            new $fields["DB_DRIVER"]($fields["DB_OPTIONS"]);
        } catch(\Exception $e) {
            throw new \Exception("Invalid DB_OPTIONS. ".$e->getMessage());
        }

        $config = [];
        $config["DB_DRIVER"] = $fields["DB_DRIVER"];
        $config["DB_OPTIONS"] = \json_encode($fields["DB_OPTIONS"]);

        return $config;
    }

    private function canCreateConfig(): bool {
        try {
            Storage::getStorage();
            return false;
        } catch (DBConfigException $e) {
            return true;
        }
    }
}